{"version":3,"file":"__selection-changed.js","mappings":"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","sources":["webpack://exports/webpack/bootstrap","webpack://exports/./src/selection-changed.js","webpack://exports/external \"sketch\"","webpack://exports/external \"util\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/selection-changed.js\");\n","// let's get a hold on the Sketch API\nconst sketch = require('sketch')\n\n// we will also need a function to transform an NSArray into a proper JavaScript array\n// the `util` package contains such a function so let's just use it.\nconst { toArray } = require('util')\n\n// ### Defining The Action Handler\n//\n// In the manifest, we told Sketch that every time the `SelectionChanged` action finishes, we want it\n// to run the onSelectionChanged handler in our `selection-changed.js` script file.\n//\n// So now we need to put some code into the `selection-changed.js` file to define that handler and make it do something useful.\n\nexport function onSelectionChanged (context) {\n  // ### Extracting Context Information\n  // Whenever sketch calls a handler in one of our plugins, it passes in a single context argument.\n  // This dictionary is our connection with Sketch itself, and contains all the information that\n  // we need to work out which document was open, perform whatever task we want to on it, and so on.\n  //\n  // When we're being called in response to an action occurring, the context will contain\n  // an actionContext property with additional information about the action, so that's the first\n  // thing that we want to retrieve:\n  const doc = sketch.getSelectedDocument()\n  const pages = doc.pages\n  const selectedLayersContext = doc.selectedLayers\n\n  const action = context.actionContext\n\n  // The context information for each action will be different. For the SelectionChanged action,\n  // we are passed three interesting values: which document the selection has changed in,\n  // what the old selection was, what the new selection is (or will be).\n\n  // For our purposes, we can ignore the old selection, but we need the other two values.\n\n  // let's wrap the native document\n  const document = sketch.fromNative(action.document)\n  // and transform the NSArray that is `newSelection` into a proper array\n  const selection = toArray(action.newSelection)\n  selection.forEach(layer => {\n    // console.log(layer)\n    // if (layer.isKindOfClass(MSTextLayer)) {\n    // //   const text = layer.stringValue()\n    //   console.log('onSelectionChanged - Text Content:', layer.stringValue())\n    //   //   layer.onGroup = function (group) {\n    //   //     group.name = layer.stringValue()\n    //   //     sketch.UI.message(`Group renamed to ${group.name}`, document)\n    //   //   }\n\n    //   // Text Content: Favorties\n    //   // Text Content: Recents\n\n    //   // Text Content: Most visited\n    // }\n    if (layer.isKindOfClass(MSLayerGroup)) {\n      if (selectedLayersContext.length != 0) {\n        selectedLayersContext.forEach(layer => {\n          if (layer.layers && layer.layers.length) {\n            const firstText = getFirstTextElement(layer.layers.reverse())\n            if (firstText && firstText.text) layer.name = firstText.text\n          }\n        })\n      }\n      //   pages.forEach(page => {\n      //     page.layers.forEach(layer => {\n      //       console.log(\n      //         getSelectedLayers(JSON.stringify(layer)),\n      //         Object.keys(layer)\n      //       )\n      //       let g = getSelectedLayers(JSON.stringify(layer))\n      //       g.name = 'Artboard'\n      //       //   if (layer.type === 'Artboard') {\n      //       //     layer.onInsertLayers = function () {\n      //       //       logSelectedLayers(layer.layers)\n      //       //       console.log('layer.layers')\n      //       //     }\n      //       //   }\n      //     })\n      //   })\n    } else {\n      return\n    }\n  })\n  // Now for the meat of the plugin. What we want it to do is to show a small message at the bottom\n  // of the canvas, showing how many items the user has selected. If there are no items, the message\n  // area should be hidden.\n\n  // So first let's get the selection count.\n  const count = selection.length\n  if (count === 0) {\n    sketch.UI.message('No layers selected', document)\n  } else {\n    // If one or more items are selected, we want to show a message.\n    // We check for a single item and handle that as a special case so that we can get the wording correct.\n\n    const message =\n      count === 1 ? '1 layer selected' : `${count} layers selected`\n\n    sketch.UI.message(message, document)\n  }\n}\n\nfunction getFirstTextElement (array) {\n  return array.reduce((acc, cur) => {\n    if (acc) {\n      return acc\n    }\n    return cur.type === 'Text' ? cur : null\n  }, null)\n}\n","module.exports = require(\"sketch\");","module.exports = require(\"util\");"],"names":["sketch","require","_require","toArray","onSelectionChanged","context","doc","getSelectedDocument","pages","selectedLayersContext","selectedLayers","action","actionContext","document","fromNative","selection","newSelection","forEach","layer","isKindOfClass","MSLayerGroup","length","layers","firstText","getFirstTextElement","reverse","text","name","count","UI","message","concat","array","reduce","acc","cur","type"],"sourceRoot":""}